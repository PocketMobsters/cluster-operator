name: Build, Test, Publish Image & Manifest

on:
  push:
    branches: [ "main" ]
    paths-ignore:
    - 'docs/**'
    - '*.md'
    - 'LICENSE.txt'
    - 'PROJECT'
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  GO_VERSION: ~1.19
  K8S_VERSION: v1.24.1
  MIN_RABBITMQ_VERSION: v3.9.9
  GKE_TEST_CLUSTER_1: ci-bunny-1
  GKE_TEST_CLUSTER_2: ci-bunny-2
  GKE_REGION: europe-west1

jobs:
  kubectl_tests:
    name: kubectl rabbitmq tests
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
    - name: Install Bats
      run: |
        git clone https://github.com/bats-core/bats-core.git "$HOME"/bats-core
        cd "$HOME"/bats-core
        sudo ./install.sh /usr/local
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: kubectl rabbitmq tests
      run: |
        export GOPATH=$HOME/go
        export PATH=$PATH:$GOPATH/bin
        make install-tools
        kind create cluster --image kindest/node:"${{ env.K8S_VERSION }}"
        DOCKER_REGISTRY_SERVER=local-server OPERATOR_IMAGE=local-operator make deploy-kind kubectl-plugin-tests
  unit_integration_tests:
    name: unit and integration tests
    runs-on: ubuntu-latest
    container: us.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Unit tests
      run: make unit-tests
    - name: Integration tests
      run: make integration-tests
  build_operator:
    runs-on: ubuntu-latest
    needs: unit_integration_tests
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
    - name: OCI Metadata for multi-arch image
      id: meta
      uses: docker/metadata-action@v4
      with:
        # list of Docker images to use as base name for tags
        images: |
          rabbitmqoperator/cluster-operator
          quay.io/rabbitmqoperator/cluster-operator
        # generate Docker tags based on the following events/attributes
        tags: |
          type=edge
          type=sha
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to Quay.io
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_ROBOT_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64, linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    - name: OCI Metadata for single-arch image
      if: startsWith(github.ref, 'refs/tags/v')
      id: single-arch-meta
      uses: docker/metadata-action@v4
      with:
        # list of Docker images to use as base name for tags
        images: |
          rabbitmqoperator/cluster-operator
        flavor: |
          latest=false
        # generate Docker tags based on the following events/attributes
        tags: |
          type=semver,pattern={{version}},suffix=-amd64,latest=false
    - name: Build and push single-arch image
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.single-arch-meta.outputs.tags }}
        labels: ${{ steps.single-arch-meta.outputs.labels }}
    - name: Build manifest
      if: github.event_name != 'pull_request'
      env:
        RELEASE_VERSION: ${{ steps.single-arch-meta.outputs.version }}
      run: |
        export GOPATH=$HOME/go
        export PATH=$PATH:$GOPATH/bin
        make install-tools
        pushd config/installation
        kustomize edit set image \
        rabbitmqoperator/cluster-operator-dev=rabbitmqoperator/cluster-operator:"${RELEASE_VERSION}"
        popd
        make generate-installation-manifest QUAY_IO_OPERATOR_IMAGE=quay.io/rabbitmqoperator/cluster-operator:"${RELEASE_VERSION}"
    - name: Upload operator manifests
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: operator-manifests
        path: release-manifest/cluster-operator*.yml
        retention-days: 2
  system_tests_local:
    name: Local system tests (using KinD)
    runs-on: ubuntu-latest
    container: us.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
    if: ${{ github.event_name == 'pull_request' }}
    needs: build_operator
    strategy:
      matrix:
        rabbitmq-image:
        - rabbitmq:3.9.9-management
        - rabbitmq:management
        - pivotalrabbitmq/rabbitmq:main-otp-min-bazel
        - pivotalrabbitmq/rabbitmq:main-otp-max-bazel
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: System tests
      env:
        K8S_VERSION: ${{ env.K8S_VERSION }}
        RABBITMQ_IMAGE: ${{ matrix.rabbitmq-image }}
      run: |
        export GOPATH=$HOME/go
        export PATH=$PATH:$GOPATH/bin
        make install-tools
        kind create cluster --image kindest/node:"$K8S_VERSION"
        DOCKER_REGISTRY_SERVER=local-server OPERATOR_IMAGE=local-operator make deploy-kind
        SUPPORT_VOLUME_EXPANSION=false make system-tests
    - name: Dry-run example YAMLs
      run: |
        for a in docs/examples/*/*.y*ml; do
          manifest_path="$manifest_path -f $a"
        done
        # The examples are assumed to run in the 'examples' namespace, create if it doesn't exist
        kubectl create namespace examples --dry-run=client -o yaml | kubectl  apply -f -
        kubectl --namespace=examples apply --dry-run=server $manifest_path
  system_tests:
    name: System tests (using GKE ci-bunny-1)
    runs-on: ubuntu-latest
    container: us.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
    if: ${{ github.event_name != 'pull_request' }}
    concurrency: ci-bunny-1
    needs: build_operator
    strategy:
      matrix:
        rabbitmq-image:
        - rabbitmq:3.9.9-management
        - rabbitmq:management
        - pivotalrabbitmq/rabbitmq:main-otp-min-bazel
        - pivotalrabbitmq/rabbitmq:main-otp-max-bazel
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ env.GCP_IDENTITY_PROVIDER }}
        service_account: ${{ env.GCP_SA }}
    - id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        cluster_name: ci-bunny-1
        location: europe-west1
    - name: Get operator manifest
      uses: actions/download-artifact@v3
      with:
        name: operator-manifests
    - name: Install Operator build
      run: |
        kubectl apply -f release-manifest/cluster-operator.yml
        kubectl --namespace=rabbitmq-system wait --for=condition=Available deployment/rabbitmq-cluster-operator
    - name: System tests
      env:
        RABBITMQ_IMAGE: ${{ matrix.rabbitmq-image }}
      run: |
        export GOPATH=$HOME/go
        export PATH=$PATH:$GOPATH/bin
        make install-tools
        make destroy
        make system-tests
  test_doc_examples:
    name: Documented example tests (using GKE ci-bunny-2)
    runs-on: ubuntu-latest
    container: us.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
    if: ${{ github.event_name != 'pull_request' }}
    concurrency: ci-bunny-2
    needs: build_operator
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ env.GCP_IDENTITY_PROVIDER }}
        service_account: ${{ env.GCP_SA }}
    - id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        cluster_name: ci-bunny-2
        location: europe-west1
    - name: Get operator manifest
      uses: actions/download-artifact@v3
      with:
        name: operator-manifests
    - name: Install Operator build
      run: |
        kubectl apply -f release-manifest/cluster-operator.yml
        kubectl --namespace=rabbitmq-system wait --for=condition=Available deployment/rabbitmq-cluster-operator
    - name: System tests
      env:
        RABBITMQ_IMAGE: ${{ matrix.rabbitmq-image }}
      run: |
        export GOPATH=$HOME/go
        export PATH=$PATH:$GOPATH/bin
        make install-tools
        make destroy
        make system-tests
  release:
    name: Release to GitHub Releases
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [system_tests, test_doc_examples]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Get operator manifest
      uses: actions/download-artifact@v3
      with:
        name: operator-manifests
    - name: Release
      uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          release-manifest/cluster-operator.yml
          release-manifest/cluster-operator-quay-io.yml
        generate_release_notes: true
        fail_on_unmatched_files: true
